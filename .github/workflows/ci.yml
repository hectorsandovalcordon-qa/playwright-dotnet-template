name: CI/CD

env:
  DOTNET_VERSION: '8.0'
  RESULTS_DIR: ./tests/UnitTests/bin/Debug/net8.0/allure-results
  REPORT_DIR: allure-report
  BASE_HREF: '/playwright-dotnet-template/'

on:
  pull_request:
    branches: [ main, dev ]

jobs:
  build:
    name: Build Project
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore and Build
        run: |
          dotnet restore ./src/playwright-dotnet-template.csproj
          dotnet build ./src/playwright-dotnet-template.csproj --configuration Debug

  unit-tests-and-sonar:
    name: Run Unit Tests & SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install Coverlet Collector
        run: dotnet add ./tests/UnitTests/UnitTests.csproj package coverlet.collector

      - name: Create TestResults Directory
        run: mkdir -p ./TestResults

      - name: SonarCloud Scan Begin
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet sonarscanner begin \
            /k:"hectorsandovalcordon-qa_playwright-dotnet-template" \
            /o:"hectorsandovalcordon-qa" \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.sources=./src \
            /d:sonar.exclusions=**/.github/**,**/tests/**,**/bin/**,**/obj/** \
            /d:sonar.cs.opencover.reportsPaths=./TestResults/coverage.opencover.xml \
            /d:sonar.verbose=true \
            /d:sonar.pullrequest.key="${{ github.event.pull_request.number }}" \
            /d:sonar.pullrequest.branch="${{ github.head_ref }}" \
            /d:sonar.pullrequest.base="${{ github.base_ref }}"

      - name: Run Unit Tests with Code Coverage
        run: |
          dotnet test ./tests/UnitTests/UnitTests.csproj \
            --configuration Debug \
            --verbosity detailed \
            /p:CollectCoverage=true \
            /p:CoverletOutput=./TestResults/coverage.opencover.xml \
            /p:CoverletOutputFormat=opencover

      - name: Verify Coverage Report
        run: |
          ls -la ./TestResults
          if [ -f ./TestResults/coverage.opencover.xml ]; then
            head -n 20 ./TestResults/coverage.opencover.xml
          else
            echo "❌ Error: El archivo de cobertura no se generó correctamente."
            exit 1
          fi

      - name: SonarCloud Scan End
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
